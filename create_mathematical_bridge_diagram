import numpy as np
import matplotlib.pyplot as plt

def create_mathematical_bridge_diagram():
    """
    Creates a dual-panel diagram showing the mathematical bridge between
    standard quantum mechanics and the Macachor-Stellar Framework: Φ669 Quantum Propulsion Mathematics.
    Left panel: string diagram of object correspondence.
    Right panel: categorical diagram of functorial relationships.
    """
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))

    # Left Panel: String Diagram
    standard_objects = ['Hilbert Space', 'State Vectors', 'Hermitian Operators', 'Unitary Evolution']
    macachor_objects = ['Quaternion Space', 'Scalar Fields', 'Macachor Operators', 'Polyhedral BC']
    y_pos = np.linspace(0.9, 0.1, len(standard_objects))

    for i, obj in enumerate(standard_objects):
        ax1.text(0.1, y_pos[i], obj, fontsize=10, ha='left',
                 bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue"))

    for i, obj in enumerate(macachor_objects):
        ax1.text(0.9, y_pos[i], obj, fontsize=10, ha='right',
                 bbox=dict(boxstyle="round,pad=0.3", facecolor="lightcoral"))

    for i in range(len(standard_objects)):
        ax1.plot([0.3, 0.7], [y_pos[i], y_pos[i]], 'k--', alpha=0.5)
        ax1.text(0.5, y_pos[i], '≅', ha='center', va='center',
                 fontsize=14, bbox=dict(boxstyle="circle,pad=0.2", facecolor="yellow"))

    ax1.set_xlim(0, 1)
    ax1.set_ylim(0, 1)
    ax1.set_title("Mathematical Bridge: Standard QM ↔ Macachor-Stellar")
    ax1.axis('off')

    # Right Panel: Categorical Diagram
    create_categorical_diagram(ax2)

    return fig

def create_categorical_diagram(ax):
    """
    Creates categorical diagram showing functorial relationships between
    StdQM, MacStellar, and the Bridge object.
    """
    objects = {
        'StdQM': (0.2, 0.8),
        'MacStellar': (0.8, 0.8),
        'Bridge': (0.5, 0.2)
    }

    for name, pos in objects.items():
        ax.add_patch(plt.Circle(pos, 0.08, fill=True, color='lightgray'))
        ax.text(pos[0], pos[1], name, ha='center', va='center', fontsize=9)

    arrows = [
        ('StdQM', 'Bridge', 'Embedding'),
        ('MacStellar', 'Bridge', 'Embedding'),
        ('Bridge', 'StdQM', 'Projection'),
        ('Bridge', 'MacStellar', 'Projection')
    ]

    for start, end, label in arrows:
        start_pos = objects[start]
        end_pos = objects[end]
        ax.arrow(start_pos[0], start_pos[1],
                 end_pos[0] - start_pos[0], end_pos[1] - start_pos[1],
                 head_width=0.02, head_length=0.02, fc='k', ec='k')
        mid_x = (start_pos[0] + end_pos[0]) / 2
        mid_y = (start_pos[1] + end_pos[1]) / 2
        ax.text(mid_x, mid_y, label, fontsize=8,
                bbox=dict(boxstyle="round,pad=0.1", facecolor="white"))

    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.set_title("Categorical Structure of Mathematical Bridge")
    ax.axis('off')
